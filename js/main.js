// Generated by CoffeeScript 1.6.3
(function() {
  var init;

  init = function() {
    var collectedLabels, moveDelay, myZoom, sigInst, zoomDelay;
    sigInst = sigma.init(document.getElementById("graph-area")).drawingProperties({
      defaultLabelColor: "#fff",
      defaultLabelSize: 14,
      defaultLabelBGColor: "#fff",
      defaultLabelHoverColor: "#000",
      labelThreshold: 6,
      defaultEdgeType: "curve"
    }).graphProperties({
      minNodeSize: 0.5,
      maxNodeSize: 5,
      minEdgeSize: 1,
      maxEdgeSize: 1,
      sideMargin: 50
    }).mouseProperties({
      maxRatio: 32
    });
    sigInst.parseGexf("arctic.gexf");
    sigInst.bind("overnodes", function(event) {
      var neighbors, nodes;
      nodes = event.content;
      neighbors = {};
      sigInst.stopForceAtlas2();
      return sigInst.iterEdges(function(e) {
        if (nodes.indexOf(e.source) >= 0 || nodes.indexOf(e.target) >= 0) {
          neighbors[e.source] = 1;
          return neighbors[e.target] = 1;
        }
      }).iterNodes(function(n) {
        if (!neighbors[n.id]) {
          return n.hidden = 1;
        } else {
          return n.hidden = 0;
        }
      });
    }).bind("outnodes", function() {
      sigInst.iterEdges(function(e) {
        return e.hidden = 0;
      }).iterNodes(function(n) {
        return n.hidden = 0;
      });
      return setTimeout((function() {
        return sigInst.startForceAtlas2();
      }), 500);
    });
    sigInst.bind('downnodes', function(event) {
      var i, node, str, _i, _len, _ref;
      node = null;
      sigInst.iterNodes((function(n) {
        return node = n;
      }), [event.content[0]]);
      console.log(node);
      str = "";
      _ref = node['attr']['attributes'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        str += "<li>" + i.attr + ":" + i.val + "</li>";
      }
      return $('#graph-data-display').empty().html("<h1>" + node.label + "</h1>\n<ul>\n	" + str + "\n</ul>\n\n\n");
    });
    moveDelay = 80;
    zoomDelay = 2;
    $(".move-icon").bind("click keypress", function(event) {
      var newPos;
      newPos = sigInst.position();
      switch ($(this).attr("action")) {
        case "up":
          newPos.stageY += moveDelay;
          break;
        case "down":
          newPos.stageY -= moveDelay;
          break;
        case "left":
          newPos.stageX += moveDelay;
          break;
        case "right":
          newPos.stageX -= moveDelay;
      }
      sigInst.goTo(newPos.stageX, newPos.stageY);
      event.stopPropagation();
      return false;
    });
    $(".zoom-icon").bind("click keypress", function(event) {
      var ratio;
      ratio = sigInst.position().ratio;
      switch ($(this).attr("action")) {
        case "in":
          ratio *= zoomDelay;
          break;
        case "out":
          ratio /= zoomDelay;
      }
      sigInst.goTo($("#graph-area").width() / 2, $("#graph-area").height() / 2, ratio);
      event.stopPropagation();
      return false;
    });
    $(".refresh-icon").bind("click keypress", function(event) {
      sigInst.position(0, 0, 1).draw();
      event.stopPropagation();
      return false;
    });
    sigInst.startForceAtlas2();
    myZoom = function(label) {
      var node, pos0;
      node = null;
      sigInst.iterNodes(function(n) {
        if (n.label === label) {
          node = n;
          return n.active = true;
        }
      });
      pos0 = sigInst.position();
      node && sigInst.position(pos0.stageX, pos0.stageY, pos0.ratio * 0.9999);
      return node && sigInst.zoomTo(node.displayX, node.displayY, sigInst.mouseProperties("maxRatio"));
    };
    collectedLabels = [];
    sigInst.iterNodes(function(n) {
      return collectedLabels.push(n.label);
    });
    $('#search').smartAutoComplete({
      source: collectedLabels
    }).bind('itemSelect', function(e) {
      var label;
      console.log(e);
      label = e.smartAutocompleteData.item.innerText;
      return myZoom(label);
    });
    console.log(collectedLabels);
    sigInst.draw();
    console.log('DRAW');
    console.log(location.hash.substring(1));
    return setTimeout((function() {
      return myZoom(location.hash.substring(1));
    }), 4000);
  };

  $(function() {
    return init();
  });

}).call(this);
